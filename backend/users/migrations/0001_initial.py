# Generated by Django 5.2.3 on 2025-06-17 13:00

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='Slug')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'Навык',
                'verbose_name_plural': 'Навыки',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='phone number')),
                ('bio', models.TextField(blank=True, null=True, verbose_name='biography')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/', verbose_name='avatar')),
                ('is_verified', models.BooleanField(default=False, verbose_name='verified')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ClientProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='company name')),
                ('position', models.CharField(blank=True, max_length=255, null=True, verbose_name='position')),
                ('website', models.URLField(blank=True, null=True, verbose_name='website')),
                ('about', models.TextField(blank=True, null=True, verbose_name='about')),
                ('notifications_enabled', models.BooleanField(default=True, verbose_name='notifications enabled')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='email notifications')),
                ('push_notifications', models.BooleanField(default=True, verbose_name='push notifications')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='client_profile', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'client profile',
                'verbose_name_plural': 'client profiles',
            },
        ),
        migrations.CreateModel(
            name='CreatorProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('specialization', models.CharField(max_length=255, verbose_name='specialization')),
                ('experience', models.CharField(max_length=255, verbose_name='experience')),
                ('portfolio_link', models.URLField(blank=True, null=True, verbose_name='portfolio link')),
                ('rating', models.DecimalField(decimal_places=2, default=0, max_digits=3, verbose_name='rating')),
                ('completed_orders', models.PositiveIntegerField(default=0, verbose_name='completed orders')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='creator_profile', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'creator profile',
                'verbose_name_plural': 'creator profiles',
            },
        ),
        migrations.CreateModel(
            name='PortfolioItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Заголовок')),
                ('description', models.TextField(verbose_name='Описание')),
                ('cover_image', models.ImageField(upload_to='portfolio/covers/', verbose_name='Обложка')),
                ('external_url', models.URLField(blank=True, null=True, verbose_name='Внешняя ссылка')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('creator_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='portfolio_items', to='users.creatorprofile', verbose_name='Профиль креатора')),
            ],
            options={
                'verbose_name': 'Элемент портфолио',
                'verbose_name_plural': 'Элементы портфолио',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PortfolioImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='portfolio/images/', verbose_name='Изображение')),
                ('caption', models.CharField(blank=True, max_length=255, verbose_name='Подпись')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='Порядок')),
                ('portfolio_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='users.portfolioitem', verbose_name='Элемент портфолио')),
            ],
            options={
                'verbose_name': 'Изображение портфолио',
                'verbose_name_plural': 'Изображения портфолио',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='SocialLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('url', models.URLField(verbose_name='url')),
                ('creator_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='social_links', to='users.creatorprofile', verbose_name='creator profile')),
            ],
            options={
                'verbose_name': 'social link',
                'verbose_name_plural': 'social links',
            },
        ),
        migrations.CreateModel(
            name='CreatorSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.PositiveSmallIntegerField(default=1, help_text='Уровень владения навыком от 1 до 5', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Уровень')),
                ('creator_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='creator_skills', to='users.creatorprofile', verbose_name='Профиль креатора')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='creator_skills', to='users.skill', verbose_name='Навык')),
            ],
            options={
                'verbose_name': 'Навык креатора',
                'verbose_name_plural': 'Навыки креатора',
                'unique_together': {('creator_profile', 'skill')},
            },
        ),
    ]
